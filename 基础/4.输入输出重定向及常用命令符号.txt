一.Linux的标准输入输出(使用数字代表)
		1. 标准输入 stdin   0    键盘
		2. 标准输出 stdout 1    屏幕
		3. 错误输出 stderr  2    屏幕
二.重定向
    所谓重定向，就是将原本的标准输入、输出的位置改变
	    1. 输入重定向 < 
            wc -l < 123.txt (将123.txt中的内容输入到wc -l指令中，获得文件的行数)
        2. 输出重定向 >(覆盖模式) >>(追加模式)
          netstat -tunlp  (获取系统的端口设置)
            netstat -tunlp 1 > 输出目标 || netstat -tunlp 1 >> 输出目标 (将netstat命令产生的输出覆盖/追加到输出目标中)
            netstat -tunlp 2 > 输出目标 || netstat -tunlp 2 >> 输出目标 (将netstat命令产生的错误覆盖/追加到输出目标中)
        3.重定向的特殊位置
            /dev/null是一个无底洞，若将输出重定向的这里，将不会产生任何记录。
            实例：将命令产生的错误输出重定向到黑洞
                la 2>/dev/null (la是一个不存在的命令，将la命令产生的错误输出重定向到黑洞)
三. 特殊符号
    ① & 代表与
        netstat -tunlp 1>out.txt 2>&1 (表示错误输出与标准输出重定向的位置相同)
    ② &> 代表不分正确还是错误
        netstat -tunlp &>out.txt (表示将标准输出与错误输出均重定向到out.txt)
    ③ | 管道符
        格式：命令A | 命令B <|命令C....> 命令A的stdout将作为命令B的stdin...，以此类推
        ps -ef|grep tomcat 查找出进程信息，然后找到进程名有tomcat的进程(在ps -ef的结果中查找tomcat)
    ④ ; 代表可以执行多条命令
        格式：命令A；命令B;....
        将会一次执行命令A、命令B、...。每个命令互不影响
    ⑤ && 
        格式：命令A&&命令B 
            A命令执行成功，才会执行B命令；若A命令执行错误，不会执行B命令
    ⑥ ||
        格式：命令A||命令B
            A命令执行失败，才会执行B命令；若A命令执行成功，不会执行B命令            
        
